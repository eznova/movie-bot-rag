import telebot
import logging
import os
import requests
import chardet
import docx
from langchain_community.llms import HuggingFaceHub
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
from langchain.chains import RetrievalQA

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACEHUB_API_TOKEN") or "–≤–∞—à_—Ç–æ–∫–µ–Ω"
BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
try:
    movie_bot = telebot.TeleBot(BOT_TOKEN)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as bot_init_error:
    logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", bot_init_error)
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
llm = HuggingFaceHub(
    repo_id="google/flan-t5-small", 
    model_kwargs={"temperature": 0.7},
    huggingfacehub_api_token=HUGGINGFACE_TOKEN
)
embedder = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
welcomed_users = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
def new_gettext(file):
    try:
        if file.endswith('.txt'):
            with open(file, 'rb') as text:
                text_body = text.read()
                enc = chardet.detect(text_body).get("encoding")
                if enc and enc.lower() != "utf-8" and enc.lower() != "windows-1251":
                    text_body = text_body.decode(enc).encode("utf-8").decode("utf-8")
                elif enc and enc.lower() == "windows-1251":
                    with open(file, 'r', encoding='windows-1251') as text:
                        text_body = text.read()
                else:
                    with open(file, 'r', encoding='utf-8') as text:
                        text_body = text.read()
                return text_body
        elif file.endswith('.docx'):
            doc = docx.Document(file)
            text_body = "\n".join(paragraph.text for paragraph in doc.paragraphs)
            return text_body
        else:
            raise ValueError("Unsupported file format")
    except Exception as e:
        logger.error(f"Error processing file: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def text_chunks(text):
    splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=100)
    return [Document(page_content=chunk) for chunk in splitter.split_text(text)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    response = requests.post(url, data=payload)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—å–±—ã –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
def ask_for_file(chat_id):
    send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–∞—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) –æ—Ç Telegram
def get_updates():
    url = f"{TELEGRAM_API_URL}getUpdates"
    response = requests.get(url)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ file_id
def get_file(file_id):
    url = f"{TELEGRAM_API_URL}getFile"
    payload = {
        "file_id": file_id
    }
    response = requests.get(url, params=payload)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –ø–æ file_id: {file_id}, response: {response.json()}")
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
def download_file(file_path, chat_id):
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
    logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å URL: {file_url}")
    response = requests.get(file_url)
    file_name = f"file_{chat_id}.txt"  # –ü—Ä–∏–º–µ—Ä –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
    if response.status_code == 200:
        with open(file_name, 'wb') as f:
            f.write(response.content)
        logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        text = new_gettext(file_name)
        if not text:
            send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
            return
        
        docs = text_chunks(text)

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma
        vectorstore = Chroma.from_documents(documents=docs, embedding=embedder)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
        retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 5})

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ RetrievalQA
        qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

        # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer = qa_chain.invoke({"query": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö"})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º invoke –≤–º–µ—Å—Ç–æ run, —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—é

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message(chat_id, f"–û—Ç–≤–µ—Ç: {answer}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@movie_bot.message_handler(content_types=['text'])
def handle_user_query(message):
    user_id = message['from']['id']
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if user_id in welcomed_users:
        return
    
    user_description_query = message.get('text')

    if "/start" in user_description_query:
        welcome_message = "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        welcome_message += "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º! üé•\n"
        welcome_message += "–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É! üçø"
        movie_bot.send_message(user_id, welcome_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö
        welcomed_users.add(user_id)
        return

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'document' in message:
        file_id = message['document']['file_id']
        file = get_file(file_id)
        if file.get('ok'):
            file_path = file['result']['file_path']
            download_file(file_path, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –≤ —Ñ—É–Ω–∫—Ü–∏—é download_file
        else:
            send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start –∏ –Ω–µ —Ñ–∞–π–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_description_query}")
    send_message(user_id, "–Ø –æ–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫—É .txt —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤.")

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def main():
    logger.info("–û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    last_update_id = None

    while True:
        updates = get_updates()
        if updates.get("result"):
            for update in updates["result"]:
                update_id = update["update_id"]
                if update_id != last_update_id:
                    message = update.get("message")
                    if message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        handle_user_query(message)
                    last_update_id = update_id

if __name__ == "__main__":
    main()
