import logging
import chromadb
import nltk
from nltk import sent_tokenize as st
import requests
import io
import os
from telebot import TeleBot
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ChromaDB –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
client = chromadb.Client()

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è embedding_dim
collection = client.create_collection(name="docs")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
model = SentenceTransformer('all-MiniLM-L6-v2')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
def check_chromadb_connection(client, collection):
    try:
        if client is not None and collection is not None:
            logger.info("ChromaDB client and collection are available.")
            test_data = "test_document"
            collection.add(
                ids=["test_id"],
                embeddings=[[0.0]*384],  # –ü—É—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–º 384 –¥–ª—è —Ç–µ—Å—Ç–∞
                documents=[test_data]
            )
            retrieved = collection.get([str("test_id")])
            if retrieved:
                logger.info("Successfully retrieved test data from ChromaDB.")
                return True
            else:
                logger.error("Test data retrieval failed.")
                return False
        else:
            logger.error("ChromaDB client or collection is not initialized.")
            return False
    except Exception as e:
        logger.error(f"Error checking ChromaDB connection: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ChromaDB –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if not check_chromadb_connection(client, collection):
    logger.error("ChromaDB client is not working properly.")
else:
    logger.info("ChromaDB client is connected and ready for use.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def new_gettext(file_content, file_name):
    try:
        if file_name.endswith('.txt'):
            text = file_content.decode("utf-8")
            logger.info(f"Extracted text from {file_name}.")
            return text
        elif file_name.endswith('.docx'):
            import docx
            doc = docx.Document(io.BytesIO(file_content))
            text = "\n".join([paragraph.text for paragraph in doc.paragraphs])
            logger.info(f"Extracted text from {file_name}.")
            return text
        else:
            logger.warning(f"Unsupported file format: {file_name}")
            return None
    except Exception as e:
        logger.error(f"Error processing file {file_name}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ ChromaDB
def create_db(file_content, file_name):
    global collection
    print(collection)
    text = new_gettext(file_content, file_name)
    if not text:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."
    
    sents = st(text)  # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    logger.info(f"Tokenized {len(sents)} sentences from the text.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ChromaDB –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    if not check_chromadb_connection(client, collection):
        return "–û—à–∏–±–∫–∞: ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    for i, d in enumerate(sents):
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            logger.info(f"Generating embedding for sentence {i}.")
            embedding = model.encode(d)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SentenceTransformer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            logger.info(f"Adding sentence {i} with embedding: {embedding[:10]}...")

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            try:
                collection.add(
                    ids=[str(i)],
                    embeddings=[embedding],
                    documents=[d]
                )
                logger.info(f"Successfully added sentence {i} to ChromaDB.")
            except Exception as e:
                logger.error(f"Error adding sentence {i} to ChromaDB: {e}")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {i} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."

        except Exception as e:
            logger.error(f"Error during embedding or adding sentence {i} to ChromaDB: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É."

    return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
def process_file(file_id, bot, file_name):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
        response = requests.get(file_url)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ create_db
        if response.status_code == 200:
            file_content = response.content
            logger.info(f"File {file_name} downloaded successfully.")
            return create_db(file_content, file_name)
        else:
            logger.error(f"Failed to download file from Telegram: {response.status_code}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞."
    except Exception as e:
        logger.error(f"Error processing file {file_id}: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ChromaDB
def search_in_db(query, collection, top_k=5):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = model.encode(query)
        logger.info(f"Generated embedding for query: {query[:30]}...")

        # –ü–æ–∏—Å–∫ —Å—Ö–æ–∂–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        results = collection.query(
            query_embeddings=[query_embedding],
            n_results=top_k
        )
        
        if not results['documents']:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
        for i, doc in enumerate(results['documents']):
            response += f"{i+1}. {doc}\n"

        return response

    except Exception as e:
        logger.error(f"Error during search in ChromaDB: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(message, bot):
    try:
        user_id = message.chat.id
        logger.info(f"User {user_id} triggered /start command.")
        welcome_message = "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        welcome_message += "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º! üé•\n"
        welcome_message += "–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt –∏–ª–∏ .docx —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É! üçø"
        bot.send_message(user_id, welcome_message)
    except Exception as e:
        logger.error(f"Error processing /start command: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def handle_document(message, bot):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        file_name = message.document.file_name
        if file_name.endswith('.txt') or file_name.endswith('.docx'):
            file_id = message.document.file_id
            logger.info(f"User {message.chat.id} uploaded a file {file_name}.")
            result = process_file(file_id, bot, file_name)
            bot.send_message(message.chat.id, result)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt –∏–ª–∏ .docx.")
    except Exception as e:
        logger.error(f"Error handling file upload: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = TeleBot(BOT_TOKEN)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(func=lambda message: True)
def handle_query(message):
    try:
        user_id = message.chat.id
        user_query = message.text  # –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"User {user_id} asked: {user_query}")

        # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = search_in_db(user_query, collection)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, result)
    except Exception as e:
        logger.error(f"Error handling query: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
@bot.message_handler(commands=['start'])
def handle_start(message):
    start(message, bot)

@bot.message_handler(content_types=['document'])
def handle_uploaded_document(message):
    handle_document(message, bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("Bot started")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
