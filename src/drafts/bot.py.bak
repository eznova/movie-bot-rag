import os
import logging
import telebot
from dotenv import load_dotenv
import chromadb
import httpx
import shutil

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
movie_bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
client = chromadb.Client()

# –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
collection_name = "movie_descriptions"
if collection_name not in client.list_collections():
    collection = client.create_collection(collection_name)
else:
    collection = client.get_collection(collection_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
def download_model(model_url, model_path):
    if not os.path.exists(model_path):
        logger.info(f"Model not found. Downloading from {model_url}...")
        response = httpx.get(model_url, stream=True)
        with open(model_path, 'wb') as f:
            shutil.copyfileobj(response.raw, f)
        logger.info("Model download complete.")
    else:
        logger.info(f"Model already exists at {model_path}.")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
MODEL_URL = "https://chroma-onnx-models.s3.amazonaws.com/all-MiniLM-L6-v2/onnx.tar.gz"
MODEL_PATH = os.path.expanduser("~/.cache/chroma/onnx_models/all-MiniLM-L6-v2/onnx.tar.gz")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
download_model(MODEL_URL, MODEL_PATH)

# –ö–æ–º–∞–Ω–¥–∞ /start
@movie_bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_description_query = message.text

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "/start" in user_description_query:
        welcome_message = "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        welcome_message += "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º! üé•\n"
        welcome_message += "–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ä–∞–∑—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–ª—å–º–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É! üçø"
        movie_bot.send_message(user_id, welcome_message)
        logger.info(f"User {user_id} triggered /start command.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–∞–π–ª–æ–≤)
@movie_bot.message_handler(content_types=['document'])
def handle_document(message):
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if message.document.mime_type == 'text/plain':
        file_id = message.document.file_id
        file_info = movie_bot.get_file(file_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = movie_bot.download_file(file_info.file_path)
        
        # –ü—Ä–æ—á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = downloaded_file.decode("utf-8")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ ChromaDB
        collection.add(
            documents=[file_content],
            metadatas=[{"source": message.document.file_name}],
            ids=[message.document.file_name],
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        movie_bot.send_message(user_id, f"–§–∞–π–ª {message.document.file_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"User {user_id} uploaded a .txt file. Link: {file_url}")
        logger.info(f"File {message.document.file_name} added to ChromaDB.")
        
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        movie_bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤.")
        logger.warning(f"User {user_id} tried to upload a non-text file.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logger.info("Bot started")
        movie_bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Error occurred: {e}")
